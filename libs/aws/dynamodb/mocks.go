// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package dynamodb is a generated GoMock package.
package dynamodb

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockdynamoDB is a mock of dynamoDB interface
type MockdynamoDB struct {
	ctrl     *gomock.Controller
	recorder *MockdynamoDBMockRecorder
}

// MockdynamoDBMockRecorder is the mock recorder for MockdynamoDB
type MockdynamoDBMockRecorder struct {
	mock *MockdynamoDB
}

// NewMockdynamoDB creates a new mock instance
func NewMockdynamoDB(ctrl *gomock.Controller) *MockdynamoDB {
	mock := &MockdynamoDB{ctrl: ctrl}
	mock.recorder = &MockdynamoDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdynamoDB) EXPECT() *MockdynamoDBMockRecorder {
	return m.recorder
}

// UpdateItemWithContext mocks base method
func (m *MockdynamoDB) UpdateItemWithContext(ctx aws.Context, input *dynamodb.UpdateItemInput, opts ...request.Option) (*dynamodb.UpdateItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateItemWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.UpdateItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItemWithContext indicates an expected call of UpdateItemWithContext
func (mr *MockdynamoDBMockRecorder) UpdateItemWithContext(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemWithContext", reflect.TypeOf((*MockdynamoDB)(nil).UpdateItemWithContext), varargs...)
}

// GetItemWithContext mocks base method
func (m *MockdynamoDB) GetItemWithContext(arg0 aws.Context, arg1 *dynamodb.GetItemInput, arg2 ...request.Option) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItemWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemWithContext indicates an expected call of GetItemWithContext
func (mr *MockdynamoDBMockRecorder) GetItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemWithContext", reflect.TypeOf((*MockdynamoDB)(nil).GetItemWithContext), varargs...)
}

// CreateTableWithContext mocks base method
func (m *MockdynamoDB) CreateTableWithContext(arg0 aws.Context, arg1 *dynamodb.CreateTableInput, arg2 ...request.Option) (*dynamodb.CreateTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTableWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.CreateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTableWithContext indicates an expected call of CreateTableWithContext
func (mr *MockdynamoDBMockRecorder) CreateTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableWithContext", reflect.TypeOf((*MockdynamoDB)(nil).CreateTableWithContext), varargs...)
}
