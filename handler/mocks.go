// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/zale144/ube/model"
	pipeline "github.com/zale144/ube/pipeline"
	reflect "reflect"
)

// MockPipeline is a mock of iPipeline interface
type MockPipeline struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineMockRecorder
}

// MockPipelineMockRecorder is the mock recorder for MockPipeline
type MockPipelineMockRecorder struct {
	mock *MockPipeline
}

// NewMockPipeline creates a new mock instance
func NewMockPipeline(ctrl *gomock.Controller) *MockPipeline {
	mock := &MockPipeline{ctrl: ctrl}
	mock.recorder = &MockPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPipeline) EXPECT() *MockPipelineMockRecorder {
	return m.recorder
}

// InvokePipeline mocks base method
func (m *MockPipeline) InvokePipeline(ctx context.Context, input ...model.Input) (pipeline.EventProcessingResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range input {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InvokePipeline", varargs...)
	ret0, _ := ret[0].(pipeline.EventProcessingResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokePipeline indicates an expected call of InvokePipeline
func (mr *MockPipelineMockRecorder) InvokePipeline(ctx interface{}, input ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, input...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokePipeline", reflect.TypeOf((*MockPipeline)(nil).InvokePipeline), varargs...)
}
